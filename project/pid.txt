
pid = Kp*e(t) + Ki*∫(e(t)dt)[0 T] + Kd*differentiate(e(t)dt)


I≈Ki​*∑e(tk​)Δt

at k = 0
Δt = 0ms
e(t0) = error0


    I(n) =I(n-1) Ki*error(n)*Δt

    Δt = 0.1ms

    I0 = Ki*error0*0

    I1 = I0 + Ki*error1*Δt

    I2 = I1 + Ki*error2*Δt

    I3 = I2 + Kierror3*Δt



receive throttle input e.g 750

translate input to desired angle

measure angle

calculate error 
desired angle = setpoint (sp)
actual angle = process variable (pv)

error = sp - pv

PID = Kp*error+Ki​*∑e(t​)Δt

if error < 0

    M1 throttle += throttle*PID 

if error > 0

    M1 throttle -= throttle*PID

end loop

Ku = 0.01

Kp = 0.2Ku = 0.004
Tu = 1.389s 
Ki = 0.4Ku/Tu = 0.005759539
Kd = 0.066KuTu = 0.00183348

void PID(double* E, double Kp, double Ki, double Kd,double* pulse1, double* pulse2, double* bl){
    double PID,P,D,dE,dt;
    static double I = 0;
    static double prevE = 0;
    static uint64_t prevTime = 0;    
    uint64_t currTime = time_us_64();

    dt = (currTime-prevTime)/1000000.0;
    if (dt < 0.000001) {dt = 0.000001;}   
    dE = *E - prevE;

    P = Kp*(*E);

    if(*pulse1>0 && *pulse1<85){
    I += Ki*(*E)*dt;}
    
    D = Kd*(dE/dt);      

    *pulse1 = *bl + P + I + D; 
    if(*pulse1>135){*pulse1 = 135;}
    if(*pulse1<0){*pulse1 = 0;}

    *pulse2 = *bl -(P + I + D);
    if(*pulse2<-135){*pulse2 = -135;}
    if(*pulse2>0){*pulse2 = 0;}

    prevTime = currTime;
    prevE = *E;
}




void read_throttle(int pwm_pin, int* c,uint16_t* throttleVal){
    uint8_t buffer[1];
    uint8_t throttleArray[5];
    uint32_t joined;
    //uint16_t throttleVal;
    uint slice = pwm_gpio_to_slice_num(pwm_pin);

    //pwm_set_chan_level(slice,0,140);
    if (uart_is_readable(uart0) == true){
        while (true) {
            led_on(7,true);
            uart_read_blocking(uart0, buffer, 1);
            if (buffer[0] == 0xFF) {
                break;
            }
        }

        uart_read_blocking(uart0, throttleArray, 4);
    led_on(7,false);
    buffer[0]=0;
    joined = 0;

    for (int j = 0; j<4; j++){
        //printf("%d ",throttleArray[j]);
        joined += (throttleArray[j]<<(8*(3-j))); 
        }
    
    *throttleVal = 125 + (125*joined)/1020;

    pwm_set_chan_level(slice,0,*throttleVal);
    *c = joined;
    }
}

void read_brake(int pwm_pin, int* d,uint16_t* brakeVal){
    //uint8_t buffer[1];
    uint8_t brakeArray[4];
    uint32_t joined;
    //uint16_t throttleVal;
    uint slice = pwm_gpio_to_slice_num(pwm_pin);


//  if (uart_is_readable(uart0) == true){
//         while (true) {
//             led_on(7,true);
//             uart_read_blocking(uart0, buffer, 1);
//             if (buffer[0] == 0xFE) {
//                 break;
//             }
//         }

//     uart_read_blocking(uart0, brakeArray, 4);
//     // led_on(7,false);
//     buffer[0]=0;


//    }
   joined = 0;

   for (int j = 0; j<4; j++){
       //printf("%d ",brakeArray[j]);
       joined += (brakeArray[j]<<(8*(3-j))); 
       }

   printf("\n");
   
   printf("\nBrake: %d\n\n",joined);
   
   *brakeVal = 125 + (125*joined)/1020;

   //    pwm_set_chan_level(slice,0,*brakeVal);

   *d = joined;

}
